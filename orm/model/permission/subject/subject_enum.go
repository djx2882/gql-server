// Code generated by go-enum
// DO NOT EDIT!

package subject

import (
	"fmt"
)

const (
	// SubjectNone is a Subject of type None
	SubjectNone Subject = iota
	// SubjectAny is a Subject of type Any
	SubjectAny
	// SubjectMe is a Subject of type Me
	SubjectMe
	// SubjectUser is a Subject of type User
	SubjectUser
	// SubjectUsers is a Subject of type Users
	SubjectUsers
	// SubjectUserContact is a Subject of type UserContact
	SubjectUserContact
	// SubjectOtherUser is a Subject of type OtherUser
	SubjectOtherUser
	// SubjectOtherUsers is a Subject of type OtherUsers
	SubjectOtherUsers
	// SubjectCompany is a Subject of type Company
	SubjectCompany
	// SubjectOtherCompany is a Subject of type OtherCompany
	SubjectOtherCompany
	// SubjectOtherCompanies is a Subject of type OtherCompanies
	SubjectOtherCompanies
	// SubjectClient is a Subject of type Client
	SubjectClient
	// SubjectClients is a Subject of type Clients
	SubjectClients
	// SubjectClientContact is a Subject of type ClientContact
	SubjectClientContact
	// SubjectContact is a Subject of type Contact
	SubjectContact
	// SubjectContacts is a Subject of type Contacts
	SubjectContacts
)

const _SubjectName = "NoneAnyMeUserUsersUserContactOtherUserOtherUsersCompanyOtherCompanyOtherCompaniesClientClientsClientContactContactContacts"

var _SubjectMap = map[Subject]string{
	0:  _SubjectName[0:4],
	1:  _SubjectName[4:7],
	2:  _SubjectName[7:9],
	3:  _SubjectName[9:13],
	4:  _SubjectName[13:18],
	5:  _SubjectName[18:29],
	6:  _SubjectName[29:38],
	7:  _SubjectName[38:48],
	8:  _SubjectName[48:55],
	9:  _SubjectName[55:67],
	10: _SubjectName[67:81],
	11: _SubjectName[81:87],
	12: _SubjectName[87:94],
	13: _SubjectName[94:107],
	14: _SubjectName[107:114],
	15: _SubjectName[114:122],
}

// String implements the Stringer interface.
func (x Subject) String() string {
	if str, ok := _SubjectMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Subject(%d)", x)
}

var _SubjectValue = map[string]Subject{
	_SubjectName[0:4]:     0,
	_SubjectName[4:7]:     1,
	_SubjectName[7:9]:     2,
	_SubjectName[9:13]:    3,
	_SubjectName[13:18]:   4,
	_SubjectName[18:29]:   5,
	_SubjectName[29:38]:   6,
	_SubjectName[38:48]:   7,
	_SubjectName[48:55]:   8,
	_SubjectName[55:67]:   9,
	_SubjectName[67:81]:   10,
	_SubjectName[81:87]:   11,
	_SubjectName[87:94]:   12,
	_SubjectName[94:107]:  13,
	_SubjectName[107:114]: 14,
	_SubjectName[114:122]: 15,
}

// ParseSubject attempts to convert a string to a Subject
func ParseSubject(name string) (Subject, error) {
	if x, ok := _SubjectValue[name]; ok {
		return x, nil
	}
	return Subject(0), fmt.Errorf("%s is not a valid Subject", name)
}

// MarshalText implements the text marshaller method
func (x Subject) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Subject) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseSubject(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
