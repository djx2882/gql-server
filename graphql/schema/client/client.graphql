type Client {
  id: ID!
  name: String!
  website: String
  vatNumber: String
  businessNumber: String
  phone: String
  shippingAddress: Address @goField(forceResolver: true)
  billingAddress: Address @goField(forceResolver: true)
  contacts: [Contact!] @goField(forceResolver: true) @hasPerm(perm: "Contacts:Read")
  createdAt: Time!
}

input CreateClientInput {
  name: String!
  website: String
  vatNumber: String
  businessNumber: String
  phone: String
  billingAddress: CreateAddressInput
  shippingAddress: CreateAddressInput
}

input UpdateClientInput {
  name: String
  website: String
  vatNumber: String
  businessNumber: String
  phone: String
  billingAddress: CreateAddressInput
  shippingAddress: CreateAddressInput
}

extend type Query {
  client(id: ID!): Client @hasPerm(perm: "Client:Read")
  # clientForCompany(companyID: ID!, id: ID!): Client! @hasPerm(perm: "OtherClient:Read")

  clients(page: Int): [Client!] @hasPerm(perm: "Clients:Read")
  # clientsForCompany(companyID: ID!, page: Int): [Client!]! @hasPerm(perm: "OtherClients:Read")
}

extend type Mutation {
  createClient(client: CreateClientInput!): Client @hasPerm(perm: "Client:Create")
  # createClientForCompany(companyID: ID!, client: CreateClientInput!) @hasPerm(perm: "OtherClient:Create")

  updateClient(client: UpdateClientInput!): Client @hasPerm(perm: "Client:Update")

  deleteClient(id: ID!): Boolean @hasPerm(perm: "Client:Delete")
}
